<?php 
require_once "../../../config/settings.inc.php";
define("IEM_APPID", 92);

$HC = "8.2.2";
require_once "../../../include/myview.php";
require_once "../../../include/forms.php";
require_once "../../../include/vtec.php";
require_once "../../../include/imagemaps.php";
require_once "../../../include/database.inc.php";
$mesosite = iemdb("mesosite");
$formhtml = "";
$image = "";
$extrascripts = "";
$headextra = "";
$expiry = 60*60*24*100; // 100 days
$t = new MyView();
$t->title = "Automated Data Plotter";

$q = isset($_GET["q"]) ? intval($_GET["q"]) : 0;
$network = isset($_GET["network"]) ? xssafe($_GET["network"]): "IACLIMATE";
$state = isset($_GET["state"]) ? xssafe($_GET["state"]): "IA";
$fmt = isset($_GET["_fmt"]) ? xssafe($_GET["_fmt"]): 'png';

// Available Plots
$data = file_get_contents("http://iem.local/plotting/auto/meta/0.json");
$jobj = json_decode($data);
$pselect = "<select name=\"q\" class=\"iemselect2\">";
foreach($jobj->plots as $k => $v){
	$pselect .= sprintf("<optgroup label=\"%s\">", $v->label);
	foreach($v->options as $k2 => $v2){
		$pselect .= sprintf("<option value=\"%s\"%s>%s (#%s)</option>",
				$v2->id,
			($v2->id == $q) ? ' selected="selected"': '', $v2->label,
				$v2->id);
	}
	$pselect .= "</optgroup>";
}
$pselect .= "</select>";

// generated by DEV/matplotlib/gen_ramps
$cmaps = Array(
	"Perceptually Uniform Sequential" => Array(
		"viridis" => "viridis", "plasma" => "plasma", "inferno" => "inferno", "magma" => "magma", ),
		"Sequential" => Array(
		"Greys" => "Greys", "Purples" => "Purples", "Blues" => "Blues", "Greens" => "Greens", "Oranges" => "Oranges", "Reds" => "Reds", "YlOrBr" => "YlOrBr", "YlOrRd" => "YlOrRd", "OrRd" => "OrRd", "PuRd" => "PuRd", "RdPu" => "RdPu", "BuPu" => "BuPu", "GnBu" => "GnBu", "PuBu" => "PuBu", "YlGnBu" => "YlGnBu", "PuBuGn" => "PuBuGn", "BuGn" => "BuGn", "YlGn" => "YlGn", ),
		"Sequential (2)" => Array(
		"binary" => "binary", "gist_yarg" => "gist_yarg", "gist_gray" => "gist_gray", "gray" => "gray", "bone" => "bone", "pink" => "pink", "spring" => "spring", "summer" => "summer", "autumn" => "autumn", "winter" => "winter", "cool" => "cool", "Wistia" => "Wistia", "hot" => "hot", "afmhot" => "afmhot", "gist_heat" => "gist_heat", "copper" => "copper", ),
		"Diverging" => Array(
		"PiYG" => "PiYG", "PRGn" => "PRGn", "BrBG" => "BrBG", "PuOr" => "PuOr", "RdGy" => "RdGy", "RdBu" => "RdBu", "RdYlBu" => "RdYlBu", "RdYlGn" => "RdYlGn", "Spectral" => "Spectral", "coolwarm" => "coolwarm", "bwr" => "bwr", "seismic" => "seismic", ),
		"Qualitative" => Array(
		"Pastel1" => "Pastel1", "Pastel2" => "Pastel2", "Paired" => "Paired", "Accent" => "Accent", "Dark2" => "Dark2", "Set1" => "Set1", "Set2" => "Set2", "Set3" => "Set3", "tab10" => "tab10", "tab20" => "tab20", "tab20b" => "tab20b", "tab20c" => "tab20c", ),
		"Miscellaneous" => Array(
		"flag" => "flag", "prism" => "prism", "ocean" => "ocean", "gist_earth" => "gist_earth", "terrain" => "terrain", "gist_stern" => "gist_stern", "gnuplot" => "gnuplot", "gnuplot2" => "gnuplot2", "CMRmap" => "CMRmap", "cubehelix" => "cubehelix", "brg" => "brg", "hsv" => "hsv", "gist_rainbow" => "gist_rainbow", "rainbow" => "rainbow", "jet" => "jet", "nipy_spectral" => "nipy_spectral", "gist_ncar" => "gist_ncar", ),
	);

$csectors = Array("AL" => "Alabama",
"AR" => "Arkansas",
"AZ" => "Arizona",
"CA" => "California",
"CO" => "Colorado",
"CT" => "Connecticut",
"DE" => "Delaware",
"FL" => "Florida",
"GA" => "Georgia",
"ID" => "Idaho",
"IL" => "Illinois",
"IN" => "Indiana",
"IA" => "Iowa",
"KS" => "Kansas",
"KY" => "Kentucky",
"LA" => "Louisana",
"ME" => "Maine",
"MD" => "Maryland",
"MA" => "Massachusetts",
"MI" => "Michigan",
"MN" => "Minnesota",
"MS" => "Mississippi",
"MO" => "Missouri",
"MT" => "Montana",
"NE" => "Nebraska",
"NH" => "New Hampshire",
"NC" => "North Carolina",
"ND" => "North Dakota",
"NV" => "Nevada",
"NH" => "New Hampshire",
"NJ" => "New Jersey",
"NM" => "New Mexico",
"NY" => "New York",
"OH" => "Ohio",
"OK" => "Oklahoma",
"OR" => "Oregon",
"PA" => "Pennsylvania",
"RI" => "Rhode Island",
"SC" => "South Carolina",
"SD" => "South Dakota",
"TN" => "Tennessee",
"TX" => "Texas",
"UT" => "Utah",
"VT" => "Vermont",
"VA" => "Virginia",
"WA" => "Washington",
"WV" => "West Virginia",
"WI" => "Wisconsin",
"WY" => "Wyoming",
"conus" => "Continental US (CONUS)",
"cornbelt" => "Corn Belt",
"iailin" => "Iowa, Illinois, Indiana",
"midwest" => "Midwestern US",
);

$jsextra = "";
$networks = Array();
$description = null;

$flist = "";
if ($q > 0){
	// Go find IEM Daily Features using this plot type
	$rs = pg_prepare($mesosite, "FINDFEAT",
			"select to_char(valid, 'dd Mon YYYY') as d, "
			." to_char(valid, 'YYYY/mm/dd') as d2, title from feature"
			." WHERE substr(appurl, 1, 14) = '/plotting/auto' and "
			." appurl ~* $1 ORDER by valid DESC");
	$rs = pg_execute($mesosite, "FINDFEAT", Array("q={$q}(&|$)"));
	if (pg_numrows($rs) > 0){
		$flist = <<<EOF
<h3>IEM Daily Features using this plot</h3>
<p>The IEM Daily Features found on this website often utilize plots found
		on this application.  Here is a listing of features referencing this
		plot type.</p>
<ul>
EOF;
		for ($i=0;$row=pg_fetch_assoc($rs); $i++){
			$uri = sprintf("/onsite/features/cat.php?day=%s", $row['d2']);
			$flist .= sprintf("<li><strong><a href=\"%s\">%s</a></strong>: %s</li>",
					$uri, $row["d"], $row["title"]);
		}
		$flist .= "</ul>\n";
	}
}
$overview = "";
if ($q == 0){
    $overview = <<<EOM
<h1>Visual Overview of All Autoplots</h1>

<p>Below you will find an example resulting image from each of the autoplots
available.  Click on the image or title to navigate to that autoplot. These are
grouped into sections as they also appear grouped in the dropdown selection
box above.</p>
EOM;
    $overview .= file_get_contents("/mesonet/share/pickup/autoplot/overview.html");
}

$nassmsg = "";
if (isset($_GET["q"])){
	$q = intval($_GET["q"]);
	$data = file_get_contents("http://iem.local/plotting/auto/meta/$q.json");
	$jobj = json_decode($data);
	// Default format to text in a certain case
	if (isset($jobj->report) && ! isset($_GET["_fmt"])){
		$fmt = "text";
	}
	if (isset($jobj->highcharts) && $jobj->highcharts && ! isset($_GET["_fmt"])){
		$fmt = "js";
	}
	if (isset($jobj->nass) && $jobj->nass){
		$nassmsg = <<<EOF
<div class="alert alert-warning">This data presentation utilizes the
	<a href="http://quickstats.nass.usda.gov/">USDA NASS Quickstats</a>.
	This presentation is not endorsed nor certified by USDA.
</div>
EOF;
	}
	$description = isset($jobj->description) ? $jobj->description: null;
	$imguri = "/plotting/auto/plot/$q/";
	$pltvars = Array();
	$form = "";
	foreach($jobj->arguments as $k => $v){
        $defaultvalue = isset($_COOKIE[$v->type]) ? xssafe($_COOKIE[$v->type]) : $v->default;
		$value = isset($_GET[$v->name]) ? xssafe($_GET[$v->name]): $defaultvalue;
		$thisrow = null;
		// BEGIN generation of interfaces based on types
		if ($v->type == "zstation"){
            setcookie($v->type, $value, time() + $expiry, "/plotting/auto/");
			// Build out listing of networks, if we have not already
			if (sizeof($networks) == 0){
				$rs = pg_query($mesosite, "SELECT id, name from networks 
						where id ~* 'ASOS' or id = 'AWOS' ORDER by name ASC");
				for ($i=0;$row=pg_fetch_assoc($rs);$i++){
					$networks[$row["id"]] = $row["name"];
				}
			}
			// Assume if we have zstation, then we don't have multiple stations
			if ($v->name == "zstation1"){
				$networkcgi = "network1";
			}else if ($v->name == "zstation2"){
				$networkcgi = "network2";
			}else {
				$networkcgi = "network";
			}
            $defaultnetwork = isset($v->network) ? $v->network : "IA_ASOS";
            $cookiename = sprintf("%s_%s", $v->type, $networkcgi);
            $defaultnetwork = isset($_COOKIE[$cookiename]) ? xssafe($_COOKIE[$cookiename]) : $defaultnetwork;
            $network = isset($_GET[$networkcgi]) ? xssafe($_GET[$networkcgi]): $defaultnetwork;
            setcookie($cookiename, $network, time() + $expiry, "/plotting/auto/");
			$netselect = make_select($networkcgi, $network, $networks, "onNetworkChange");
			$thisrow = $netselect ." ". networkSelect($network, $value, Array(), $v->name);
			$pltvars[] = sprintf("%s:%s", $networkcgi, $network);
		}
		elseif ($v->type == "sid"){
            setcookie($v->type, $value, time() + $expiry, "/plotting/auto/");
			// Build out listing of networks, if we have not already
			if (sizeof($networks) == 0){
				$rs = pg_query($mesosite, "SELECT id, name from networks ".
					"ORDER by name ASC");
				for ($i=0;$row=pg_fetch_assoc($rs);$i++){
					$networks[$row["id"]] = $row["name"];
				}
			}
			// Assume if we have zstation, then we don't have multiple stations
			if ($v->name == "zstation1"){
				$networkcgi = "network1";
			}else if ($v->name == "zstation2"){
				$networkcgi = "network2";
			}else {
				$networkcgi = "network";
			}
            $defaultnetwork = isset($v->network) ? $v->network : "IA_ASOS"; 
            $cookiename = sprintf("%s_%s", $v->type, $networkcgi);
            $defaultnetwork = isset($_COOKIE[$cookiename]) ? xssafe($_COOKIE[$cookiename]) : $defaultnetwork;
            $network = isset($_GET[$networkcgi]) ? xssafe($_GET[$networkcgi]): $defaultnetwork;
            setcookie($cookiename, $network, time() + $expiry, "/plotting/auto/");
			$netselect = make_select($networkcgi, $network, $networks, "onNetworkChange");
			$thisrow = $netselect ." ". networkSelect($network, $value, Array(), $v->name);
			$pltvars[] = sprintf("%s:%s", $networkcgi, $network);
		}
		elseif ($v->type == "ugc"){
			$stateselect = stateSelect($state, "onNetworkChange");
			$thisrow = $stateselect ." ". ugcStateSelect($state, $value);
			$pltvars[] = sprintf("%s:%s", "state", $state);
		}
		elseif ($v->type == "station"){
            setcookie($v->type, $value, time() + $expiry, "/plotting/auto/");
			if (sizeof($networks) == 0){
				$rs = pg_query($mesosite, "SELECT id, name from networks ". 
					"where id ~* 'CLIMATE' ORDER by name ASC");
				for ($i=0;$row=pg_fetch_assoc($rs);$i++){
					$networks[$row["id"]] = $row["name"];
				}
			}
			// Assume if we have station, then we don't have multiple stations
			if ($v->name == "station1"){
				$networkcgi = "network1";
			}else if ($v->name == "station2"){
				$networkcgi = "network2";
			}else {
				$networkcgi = "network";
			}
			$defaultnetwork = isset($v->network) ? $v->network : "IACLIMATE";
            $cookiename = sprintf("%s_%s", $v->type, $networkcgi);
            $defaultnetwork = isset($_COOKIE[$cookiename]) ? xssafe($_COOKIE[$cookiename]) : $defaultnetwork;
            $network = isset($_GET[$networkcgi]) ? xssafe($_GET[$networkcgi]): $defaultnetwork;
            setcookie($cookiename, $network, time() + $expiry, "/plotting/auto/");
			$netselect = make_select($networkcgi, $network, $networks, "onNetworkChange",
					"iemselect2");
			$thisrow = $netselect ." ". networkSelect($network, $value, Array(), $v->name);
			$pltvars[] = sprintf("%s:%s", $networkcgi, $network);
		}
		elseif ($v->type == "networkselect"){
            $cookiename = sprintf("networkselect_%s", $v->network);
            // Check again if we were given anything
            $defaultvalue = isset($_COOKIE[$cookiename]) ? xssafe($_COOKIE[$cookiename]): $defaultvalue;
            $value = isset($_GET[$v->name]) ? xssafe($_GET[$v->name]): $defaultvalue;
            setcookie($cookiename, $value, time() + $expiry, "/plotting/auto/");
            $extra = Array();
			if (isset($v->all)){
				$extra["_ALL"] = Array('name'=>' -- All Sites --');
			}
			$netselect = networkSelect($v->network, $value, $extra, $v->name);
			$thisrow = $netselect;
			$pltvars[] = sprintf("%s:%s", "network", $v->network);
		}
		elseif ($v->type == "phenomena"){
			$netselect = vtecPhenoSelect($value);
			$thisrow = $netselect;
		}
		elseif ($v->type == "significance"){
			$netselect = vtecSigSelect($value);
			$thisrow = $netselect;
		}
		elseif ($v->type == "vtec_ps"){
			// Tricky here, we need name to represent the suffix to the name
			$suffix = $v->name;
			$value = isset($_GET["phenomena{$suffix}"]) ? xssafe($_GET["phenomena{$suffix}"]) : '';
			$netselect = vtecPhenoSelect($value, "phenomena{$suffix}");
			$value = isset($_GET["significance{$suffix}"]) ? xssafe($_GET["significance{$suffix}"]) : '';
			$netselect2 = vtecSigSelect($value, "significance{$suffix}");
			$thisrow = sprintf("%s &nbsp; %s", $netselect, $netselect2);
		}
		elseif ($v->type == "state"){
            setcookie($v->type, $value, time() + $expiry, "/plotting/auto/");
			$netselect = stateSelect($value, '', $v->name);
			$thisrow = $netselect;
		}
		elseif ($v->type == 'csector'){
            setcookie($v->type, $value, time() + $expiry, "/plotting/auto/");
			// CONUS plotting sectors
			$netselect = make_select($v->name, $value, $csectors);
			$thisrow = $netselect;
		}
		elseif ($v->type == 'cmap'){
			// cmap selection
			// if cmap has _r at the end
			$opton = isset($_GET[$v->name ."_r"]) ? ($_GET[$v->name ."_r"] == 'on') : false;
			if (endswith($value, "_r")){
				$value = preg_replace('/_r$/', "", $value);
				$opton = true;
			}
			$thisrow = make_select($v->name, $value, $cmaps, null, "cmapselect");
			$thisrow .= sprintf('&nbsp; <input type="checkbox" name="%s_r" '.
				'value="on"%s> Reverse Colormap?', $v->name,
				$opton ? ' checked="checked"': '');
			$pltvars[] = sprintf("%s:%s%s", $v->name, $value,
				($opton) ? "_r": "");
			$jsextra .= <<<EOF
function formatState (state) {
	if (!state.id) {
	  return state.text;
	}
	var baseUrl = "/pickup/cmaps";
	var $state = $(
	  '<span><img src="' + baseUrl + '/' + state.element.value + '.png" /> ' + state.text + '</span>'
	);
	return $state;
  };
  
  $(".cmapselect").select2({
	templateSelection: formatState,
	templateResult: formatState
  });			
EOF;
		}
		elseif ($v->type == "text" || $v->type == "int" || $v->type == 'float'){
			$thisrow = "<input value=\"$value\" type=\"text\" name=\"". $v->name ."\" size=\"60\">";
		}
		elseif ($v->type == "month"){
			$thisrow = monthSelect2( $value, $v->name);
		}
		elseif ($v->type == "zhour"){
			$thisrow = gmtHourSelect( $value, $v->name);
		}
		elseif ($v->type == "hour"){
			$thisrow = hourSelect( $value, $v->name);
		}
		elseif ($v->type == "day"){
			$thisrow = daySelect( $value, $v->name);
		}
		elseif ($v->type == "year"){
			$thisrow = yearSelect2(isset($v->min) ? $v->min: 1893, $value,
					$v->name, '', isset($v->max) ? $v->max: date("Y"));
		}
		elseif ($v->type == "select"){
			$netselect = make_select(
				$v->name, $value, $v->options, '', '',
				isset($v->multiple) && $v->multiple === TRUE);
			$thisrow = $netselect;
		}
		elseif ($v->type == 'datetime'){
			$dpname = "timepicker_". $v->name;
			$maxdate = isset($v->max) ? $v->max: Date("Y/m/d Hi", time() + (86000 * 2.));
			$jsextra .= <<<EOF
$( "#{$dpname}" ).datetimepicker({
    controlType: 'select',
	changeMonth: true,
	changeYear: true,
	dateFormat: "yy/mm/dd",
	timeFormat: "HHmm",
    maxDateTime: $.datepicker.parseDateTime('yy/mm/dd', 'HHmm', "{$maxdate}"),
	minDateTime: $.datepicker.parseDateTime('yy/mm/dd', 'HHmm', "{$v->min}")});
$("#{$dpname}").datetimepicker('setDate', $.datepicker.parseDateTime('yy/mm/dd', 'HHmm', '{$value}'));
			
EOF;
			$thisrow = "<input type=\"text\" name=\"". $v->name
			."\" id=\"{$dpname}\" /> (YYYY/mm/dd HH24MI)";
		}
		elseif ($v->type == "date"){
			$dpname = "datepicker_". $v->name;
			$mindate = isset($v->min) ? $v->min: '1893/1/1';
			$maxdate = isset($v->max) ? $v->max: Date("Y/m/d");
			$jsextra .= <<<EOF
$( "#{$dpname}" ).datepicker({
	changeMonth: true,
	changeYear: true,
	dateFormat: "yy/mm/dd",
	maxDate: new Date("{$maxdate}"),
	minDate: new Date("{$mindate}")});
$("#{$dpname}").datepicker('setDate', new Date("{$value}"));
	
EOF;
			$thisrow = "<input type=\"text\" name=\"". $v->name 
					."\" id=\"{$dpname}\" /> (YYYY/mm/dd)";
		}
		if ($thisrow != null){
			if (isset($v->optional) && $v->optional){
				// Okay, we have an optional field, so we carry around an
				// extra $_GET var prefixed with _opt_
				$opton = isset($_GET["_opt_". $v->name]) ? ($_GET["_opt_". $v->name] == 'on') : false;
				$thisrow = sprintf("<input class=\"optcontrol\" %s type=\"checkbox\" value=\"on\" name=\"%s\">"
						."<div id=\"%s\" style=\"display: %s;\">%s</div>",
						$opton ? " checked=\"checked\"": "",
						"_opt_". $v->name, "_opt_". $v->name,
						$opton ? "block": 'none', $thisrow);
				if ($opton){
					if ($v->type == 'vtec_ps'){
						$value = isset($_GET["phenomena{$suffix}"]) ? xssafe($_GET["phenomena{$suffix}"]) : 'SV';
						$pltvars[] = sprintf("phenomena%s:%s", $v->name, $value);
						$value = isset($_GET["significance{$suffix}"]) ? xssafe($_GET["significance{$suffix}"]) : 'W';
						$pltvars[] = sprintf("significance%s:%s", $v->name, $value);
					} elseif ($v->type == 'cmap') {
					  // handled above
					} else {
						if (is_array($value)){
							foreach($value as $kk => $vv){
								$pltvars[] = sprintf("%s:%s", $v->name, $vv);
							}
						} else {
							$pltvars[] = sprintf("%s:%s", $v->name, $value);
						}
					}
				}
			} else{
				if ($v->type == 'vtec_ps'){
					$value = isset($_GET["phenomena{$suffix}"]) ? xssafe($_GET["phenomena{$suffix}"]) : 'SV';
					$pltvars[] = sprintf("phenomena%s:%s", $v->name, $value);
					$value = isset($_GET["significance{$suffix}"]) ? xssafe($_GET["significance{$suffix}"]) : 'W';
					$pltvars[] = sprintf("significance%s:%s", $v->name, $value);
				} elseif ($v->type == 'cmap') {
					// handled above
				} else {
					if (is_array($value)){
						foreach($value as $kk => $vv){
							$pltvars[] = sprintf("%s:%s", $v->name, $vv);
						}
					} else {
						$pltvars[] = sprintf("%s:%s", $v->name, $value);
					}
				}
			}
			$form .= "<tr><td>{$v->label}</td><td>{$thisrow}</td></tr>";
		}
	}
	if (isset($_GET["_cb"]) && $_GET["_cb"] == "1"){
	    $pltvars[] = "_cb:1";
	}
	$imguri .= str_replace('/', '-', implode("::", $pltvars));
	if (isset($_GET["_wait"]) && $_GET["_wait"] == 'yes'){
		$image = "";
	} else{
		if ($fmt == 'text'){
			$res = file_get_contents("http://iem.local{$imguri}.txt");
			$image = <<<EOF
<pre>
{$res}
</pre>			
EOF;
		} elseif ($fmt == 'js'){
			// Add debug to the screen so to allow easy copy/paste
			$image = ($_SERVER['SERVER_NAME'] == 'iem.local') ? "<pre>iem.local: ${imguri}.js</pre>": ""; 
			$image .= '<div id="ap_container" style="width:100%s;height:400px;"></div>';
			$extrascripts .= <<<EOF
<script src="/vendor/highcharts/{$HC}/highcharts.js"></script>		
<script src="/vendor/highcharts/{$HC}/highcharts-more.js"></script>		
<script src="/vendor/highcharts/{$HC}/modules/exporting.js"></script>		
<script src="${imguri}.js"></script>		
EOF;
		} elseif ($fmt == 'mapbox'){
			// Add debug to the screen so to allow easy copy/paste
			$image = ($_SERVER['SERVER_NAME'] == 'iem.local') ? "<pre>iem.local: ${imguri}.mapbox</pre>": ""; 
			$image .= '<div id="map" style="width:100%s;height:400px;"></div>';
			$headextra .= <<<EOF
            <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.1/mapbox-gl.js'></script>
            <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.1/mapbox-gl.css' rel='stylesheet' />
EOF;
            $extrascripts .= "<script src=\"${imguri}.mapbox\"></script>";
		} elseif ($fmt == 'png' || $fmt == 'svg') {
			$timing_secs = intval($jobj->{"timing[secs]"}) + 1;
			if ($timing_secs < 1) $timing_secs = 5;
			$image = <<<EOF
<div id="willload" style="height: 200px;">
	<p><span class="fa fa-arrow-down"></span> 
	Based on a sampling of recent timings for this application, plot generation
 time has averaged {$timing_secs} seconds. Hold on for the plot is generating now!</p>
	<div class="progress progress-striped active">
		<div id="timingbar" class="progress-bar progress-bar-warning" role="progressbar"
	     aria-valuenow="0" aria-valuemin="0" aria-valuemax="{$timing_secs}"
		 style="width: 0%;"></div>
	</div>
</div>
<br clear="all" />
	<img src="{$imguri}.{$fmt}" class="img img-responsive" id="theimage" />
EOF;
			$jsextra .= <<<EOM
var timing = 0;
var progressBar = setInterval(function (){
	if (timing >= {$timing_secs} || $('#willload').css('display') == 'none'){
		clearInterval(progressBar);
	}
	var width = (timing / {$timing_secs}) * 100.;
	$("#timingbar").css('width', width +'%').attr('aria-valuenow', width);
	timing = timing + 0.2;
}, 200);
EOM;
		} elseif ($fmt == 'pdf'){
			$image = <<<EOF
<object id="windrose-plot" src="{$imguri}.{$fmt}" width="700px" height="700px">
    <embed src="{$imguri}.{$fmt}" width="700px" height="700px">
    </embed>
</object>
			
EOF;
		}
	}
	// Some tricky logic here about format
	$ar = Array("png" => "Chart Image (.PNG)",
			"svg" => "Scalable Vector Graphic (.SVG)",
			"pdf" => "Portable Document Format (.PDF)");
	if (isset($jobj->report) && $jobj->report){
		$ar["text"] = "Plain Text";
	}
	elseif (isset($jobj->highcharts) && $jobj->highcharts){
		$ar["js"] = "Interactive Chart";
	}
	elseif (isset($jobj->mapbox) && $jobj->mapbox){
		$ar["mapbox"] = "Interactive Map";
	}
	$thisi = make_select("_fmt", $fmt, $ar);
	$form .= sprintf("<tr><td>Select Output Format</td><td>%s</td></tr>",
			$thisi);
	$formhtml = <<<EOF
<style>
.optcontrol {
  float: left;
  margin-right: 10px !important;
}
.ui-datepicker-year {
  color: #000;
}
.ui-datepicker-month {
  color: #000;
}
</style>
<script>
function onNetworkChange(newnetwork){
    $("#_wait").val("yes");
	$('form#myForm').submit();
}
</script>
	<h4><span class="fa fa-arrow-right"></span> Second, select specific chart options::</h4>
	<form method="GET" name="s" id="myForm">
	<input type="hidden" name="_wait" value="no" id="_wait">
	<input type="hidden" name="q" value="{$q}">
	<table class="table table-striped">
		<thead><tr><th>Description</th><th>Value</th></tr></thead>
	$form
	</table>		
	<button type="submit">Make Plot with Options</button>
	<button type="submit" name="_cb" value="1">Force Updated Plot (no caching)</button>
</form>
EOF;
}

$dhtml = "";
if ($description != null){
	$dhtml = sprintf("<div class=\"alert alert-info\"><h4>Plot Description:</h4>%s</div>", $description);
}
$dataextra= "";
if (isset($jobj->data) && $jobj->data){
	$dataextra = <<<EOF
<p><a href="{$imguri}.csv" class="btn btn-default"><i class="fa fa-pencil"></i> View Data (as csv)</a>
<a href="{$imguri}.xlsx" class="btn btn-default"><i class="fa fa-pencil"></i> Download as Excel</a>
</p>
EOF;
}

$issues = "";
if ($q > 0){
    $issues = <<<EOM
    <div><span class="fa fa-info"></span>
    If you notice plotting issues with the image above, please 
    do <a class="alert-link" href="/info/contacts.php">let us know</a>
    by providing the 
    URL address currently shown by your web browser.</div>
EOM;
}

$t->content = <<<EOF
<h3>Automated Data Plotter</h3>

<p>This application dynamically generates many types of graphs.  These graphs
are derived from processing of various data sources done by the IEM.  Please
feel free to use these generated graphics in whatever way you wish.</p>

<br /><form method="GET" name="t">
<div class="form-group">
<h4><span class="fa fa-arrow-right"></span> First, select a chart type::</h4>
{$pselect}
<input type="submit" value="Select Plot Type" />
</div>
</form>

<hr />


 $formhtml


<hr />

$dhtml

$nassmsg

$image

$dataextra
		
{$issues}

{$flist}

{$overview}

EOF;
$t->jsextra = <<<EOF
<script src="/vendor/jquery-ui/1.11.4/jquery-ui.js"></script>
<script src="/vendor/jquery-ui-timepicker/1.6.3/jquery-ui-timepicker-addon.min.js"></script>
<script src="/vendor/select2/4.0.3/select2.min.js"></script>
{$extrascripts}
<script>
function hideImageLoad(){
	// console.log("load() fired...");
	$('#willload').css('display', 'none');
}
$(document).ready(function(){
{$jsextra}
    $('.optcontrol').change(function(){
        if (this.checked){
        	$("#"+ this.name).css('display', 'block');
        } else {
        	$("#"+ this.name).css('display', 'none');
        }
    });
	$('#theimage').on('load', function(){
		hideImageLoad();
	});
	$('#theimage').on('error', function(){
		hideImageLoad();
	});
    // The image may be cached and return to the user before this javascript
    // is hit, so we do a check to see if it is indeed loaded now
	if ($("#theimage").get(0) && $("#theimage").get(0).complete){
		hideImageLoad();
	}
    $(".iemselect2").select2();
});
</script>
EOF;
$t->headextra = <<<EOF
 <link rel="stylesheet" href="/vendor/jquery-ui/1.11.4/jquery-ui.css" />
 <link rel="stylesheet" type="text/css" href="/vendor/jquery-ui-timepicker/1.6.3/jquery-ui-timepicker-addon.min.css"/ >
 <link rel="stylesheet" type="text/css" href="/vendor/select2/4.0.3/select2.min.css"/ >
<style>
    .select2-results .select2-disabled,  .select2-results__option[aria-disabled=true] { 
    display: none;
    }
.ui-datepicker { width: 17em; padding: .2em .2em 0; z-index: 9999 !important; }
.cmapselect { width: 400px; }
</style>
 {$headextra}
EOF;

$t->render('full.phtml');
?>
